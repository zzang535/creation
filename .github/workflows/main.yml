name: CI/CD Docker # workflow name2

on:
  push:
    branches: [main] # on push main branch

env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/creation.bird89 # github.actor : zzang535, album.bird89 : image name
  VERSION: ${{ github.sha }} # github.sha : github variable
  NAME: creation.bird89-container # set name in env

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v2 # code copy from my repository

      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }} # runner setting variable
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io # github deploy solution
          username: ${{ github.actor }} # github.actor : zzang535
          password: ${{ secrets.GIT_TOKEN }} # secrets.GIT_TOKEN : zzang535 git token

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            "DATABASE_URL=${{ secrets.DATABASE_URL }}"
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

  deploy:
    needs: build # after build process
    name: Deploy
    runs-on: [self-hosted] # AWS runner ./configure에서 사용할 label명
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io # github deploy solution
          username: ${{ github.actor }} # github.actor : zzang535
          password: ${{ secrets.GIT_TOKEN }} # secrets.GIT_TOKEN : zzang535 git token

      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} || true
          docker rm ${{ env.NAME }} || true
          docker rmi ${{ env.DOCKER_IMAGE }}:latest || true
          docker run -d -p 4000:4000 --name ${{ env.NAME }} --restart always ${{ env.DOCKER_IMAGE }}:latest || true
